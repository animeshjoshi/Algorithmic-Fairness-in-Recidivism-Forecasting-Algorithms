import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier

df_list = []
for test_fold in range(0, 250):

    print('start loop')

    test_fold_title = 'Folds/Fold ' + str(test_fold) + '.csv'

    test = pd.read_csv(test_fold_title)
    y_test = test['Recidivism_Within_3years']
    y_train = test.drop(['Unnamed: 0', 'Recidivism_Within_3years'], axis = 1)

    train_arr = []

    
    for train_titles in range(0, 250):

        train_fold_title = 'Folds/Fold ' + str(train_titles) + '.csv'

        print(train_fold_title)
        print(test_fold_title)

        print(train_fold_title != test_fold_title)

        if train_fold_title != test_fold_title:

            print('hi')

            train = pd.read_csv(train_fold_title)
            train = train.drop('Unnamed: 0', axis = 1)

            train_arr.append(train)

    train_data = pd.concat(train_arr)

    X_train = train_data.drop('Recidivism_Within_3years', axis = 1)
    X_test = train_data['Recidivism_Within_3years']

    lr = LogisticRegression()
    lr.fit(X_train, X_test)
    lda = LinearDiscriminantAnalysis()
    print('check')
    lda.fit(X_train, X_test)
    print('check 1.005')
   
   
    rf = RandomForestClassifier(n_estimators = 100, random_state=22)
    rf.fit(X_train, X_test)
    print('check 2')

        #Build the model
    xg = XGBClassifier(n_estimators=100, max_depth=2, learning_rate=1, objective='binary:logistic', random_state=22)

    # Trained the model
    xg.fit(X_train, X_test)


    count = 0



    dataframe_title = 'Probability Frames/Y Dataframe with Probabilities - Fold ' + str(count) + '.csv'

    

    new_df = y_train.copy()

    new_df['Actual Outcomes'] = y_test


    predictions = rf.predict_proba(y_train)
    preds = []
    for i in predictions:

        preds.append(i[1])


    new_df['Random Forest Probabilities'] = preds

    predictions = lr.predict_proba(y_train)
    preds = []
    for i in predictions:

        preds.append(i[1])


    new_df['Logistic Regression Probabilities'] = preds

    predictions = lda.predict_proba(y_train)
    preds = []
    for i in predictions:

        preds.append(i[1])

    new_df['LDA Probabilities'] = preds

    predictions = xg.predict_proba(y_train)
    preds = []
    for i in predictions:

        preds.append(i[1])

    new_df['XG Probabilities'] = preds

    df_list.append(new_df)

new_df = pd.concat(df_list)

new_df.to_csv('Probability Folds Merged.csv')

   







