
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from sklearn.metrics import confusion_matrix




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from sklearn.metrics import confusion_matrix

def group_one_ppr(df, protected_class, ground_truth, predictions):
    
    df['Ground Truth'] = ground_truth
    df['Predictions'] = predictions
    groupone_df = df[df[protected_class] == 1]
    
    #cm = confusion_matrix(groupone_df['Ground Truth'], groupone_df['Predictions'])
    

    return len(groupone_df[groupone_df['Predictions'] == 0])/len(groupone_df)
   
    


def group_two_ppr(df, protected_class, ground_truth, predictions):
    
    df['Ground Truth'] = ground_truth
    df['Predictions'] = predictions
    groupone_df = df[df[protected_class] == 0]
   
    
    return len(groupone_df[groupone_df['Predictions'] == 0])/len(groupone_df)

def group_one_npr(df, protected_class, ground_truth, predictions):
    
    df['Ground Truth'] = ground_truth
    df['Predictions'] = predictions
    groupone_df = df[df[protected_class] == 1]
   
    return len(groupone_df[groupone_df['Predictions'] == 1])/len(groupone_df)

def group_two_npr(df, protected_class, ground_truth, predictions):
    
    df['Ground Truth'] = ground_truth
    df['Predictions'] = predictions
    groupone_df = df[df[protected_class] == 0]
    print(groupone_df['Predictions'])
    
    return len(groupone_df[groupone_df['Predictions'] == 1])/len(groupone_df)



lr_goppr = []
lr_gtppr = []
lr_gonpr = []
lr_gtnpr = []
lda_goppr = []
lda_gtppr = []
lda_gonpr = []
lda_gtnpr = []
rf_goppr = []
rf_gtppr = []
rf_gonpr = []
rf_gtnpr = []
xg_goppr = []
xg_gtppr = []
xg_gonpr = []
xg_gtnpr = []


for test_fold in range(0, 250):

    print('start loop')

    test_fold_title = 'Folds/Fold ' + str(test_fold) + '.csv'

    test = pd.read_csv(test_fold_title)
    y_test = test['Recidivism_Within_3years']
    y_train = test.drop(['Unnamed: 0', 'Recidivism_Within_3years'], axis = 1)

    train_arr = []

    
    for train_titles in range(0, 250):

        train_fold_title = 'Folds/Fold ' + str(train_titles) + '.csv'

       

        if train_fold_title != test_fold_title:

          

            train = pd.read_csv(train_fold_title)
            train = train.drop('Unnamed: 0', axis = 1)

            train_arr.append(train)

    train_data = pd.concat(train_arr)

    X_train = train_data.drop('Recidivism_Within_3years', axis = 1)
    X_test = train_data['Recidivism_Within_3years']

    lr = LogisticRegression()
    lr.fit(X_train, X_test)
    lda = LinearDiscriminantAnalysis()
    print('check')
    lda.fit(X_train, X_test)
    print('check 1.005')
   
    rf = RandomForestClassifier(n_estimators = 100, random_state=22)
    rf.fit(X_train, X_test)
    print('check 2')

        #Build the model
    xg = XGBClassifier(n_estimators=100, max_depth=2, learning_rate=1, objective='binary:logistic', random_state=22)

    # Trained the model
    xg.fit(X_train, X_test)

   # print(X_test.columns)

    rf_predictions = rf.predict(y_train)

    lda_predictions = lda.predict(y_train)
    xg_predictions = xg.predict(y_train)

  

    lr_predictions = lr.predict(y_train)

   



    rf_goppr.append(group_one_ppr(y_train, 'Race_WHITE', y_test, rf_predictions))


    rf_gtppr.append(group_two_ppr(y_train, 'Race_WHITE', y_test, rf_predictions))
    rf_gonpr.append(group_one_npr(y_train, 'Race_WHITE', y_test, rf_predictions))

   # print(group_two_npr(y_train, 'Race_WHITE', y_test, rf_predictions) + group_two_ppr(y_train, 'Race_WHITE', y_test, rf_predictions))
    rf_gtnpr.append(group_two_npr(y_train, 'Race_WHITE', y_test, rf_predictions))

    lda_goppr.append(group_one_ppr(y_train, 'Race_WHITE', y_test, lda_predictions))
    lda_gtppr.append(group_two_ppr(y_train, 'Race_WHITE', y_test, lda_predictions ))
    lda_gonpr.append(group_one_npr(y_train, 'Race_WHITE', y_test, lda_predictions ))
    lda_gtnpr.append(group_two_npr(y_train, 'Race_WHITE', y_test, lda_predictions ))

    xg_goppr.append(group_one_ppr(y_train, 'Race_WHITE', y_test, xg_predictions))
    xg_gtppr.append(group_two_ppr(y_train, 'Race_WHITE', y_test, xg_predictions))
    xg_gonpr.append(group_one_npr(y_train, 'Race_WHITE', y_test, xg_predictions))
    xg_gtnpr.append(group_two_npr(y_train, 'Race_WHITE', y_test, xg_predictions))

    
    lr_goppr.append(group_one_ppr(y_train, 'Race_WHITE', y_test, lr_predictions))
    lr_gtppr.append(group_two_ppr(y_train, 'Race_WHITE', y_test, lr_predictions))
    lr_gonpr.append(group_one_npr(y_train, 'Race_WHITE', y_test, lr_predictions))
    lr_gtnpr.append(group_two_npr(y_train, 'Race_WHITE', y_test, lr_predictions))

    
   
    print('check 3')

df = pd.DataFrame()

df['LRPrivPPR'] = lr_goppr

df['LRProtPPR'] = lr_gtppr

df['LRPrivNPR'] = lr_gonpr

df['LRProtNPR'] = lr_gtnpr

df['LDAPrivPPR'] = lda_goppr

df['LDAProtPPR'] = lda_gtppr

df['LDAPrivNPR'] = lda_gonpr

df['LDAProtNPR'] = lda_gtnpr

df['XGPrivPPR'] = xg_goppr

df['XGProtPPR'] = xg_gtppr
df['XGPrivNPR'] = xg_gonpr

df['XGProtNPR'] = xg_gtnpr


df['RFPrivPPR'] = rf_goppr

df['RFProtPPR'] = rf_gtppr

df['RFPrivNPR'] = rf_gonpr

df['RFProtNPR'] = rf_gtnpr



df.to_csv('NPR and PPR Distribution.csv')
df.to_csv("C:/Users/anime/Downloads/NPR and PPR Distribution.csv")











